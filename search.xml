<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Redis学习笔记</title>
    <url>/2020/04/05/RedisStudy/</url>
    <content><![CDATA[<p>记录对Redis基础知识的学习。</p>
<a id="more"></a>

<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>Redis是基于内存的单线程模型的高性能键值数据库，由C语言编写。是一种NoSQL，非关系型的数据库。Redis可以通过一些键值类型来存储数据。 5种键值类型： string字符类型，map散列类型，list列表类型，set集合类型，sortedset有序集合类型 。</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>string 是最基本的类型，而且string 类型是二进制安全的。redis 的string 可以包含任何数据。比如图片或者序列化的对象。从内部实现来看其实string 可以看作 byte数组。</p>
<ul>
<li><p>赋值 <code>set key value</code></p>
</li>
<li><p>取值 <code>get value</code></p>
</li>
<li><p>设置多个键值 <code>mset key value [key value...]</code></p>
</li>
<li><p>获取多个键值 <code>mget key [key...]</code></p>
</li>
<li><p>删除 <code>del key</code> </p>
</li>
</ul>
<h4 id="Hash-散列类型"><a href="#Hash-散列类型" class="headerlink" title="Hash 散列类型"></a>Hash 散列类型</h4><p>hash提供了字段和字段值的映射。字段值只能是字符串类型，不支持散列类型、集合类型等其它类型，hash 特别适合用于存储对象。 </p>
<ul>
<li><p>一次设置一个字段值 <code>hset key field value</code></p>
</li>
<li><p>一次设置多个字段值 <code>hmset key field value [field value...]</code></p>
</li>
<li><p>一次获取一个字段值 <code>hget key field</code> </p>
</li>
<li><p>一次可以获取多个字段值 <code>hmget key field [field...]</code></p>
</li>
<li><p>获取所有字段值 <code>hgetall key</code></p>
</li>
</ul>
<h4 id="List-列表类型"><a href="#List-列表类型" class="headerlink" title="List 列表类型"></a>List 列表类型</h4><p>Redis 列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素到列表的头部（左边）或者尾部（右边）， 底层是一个链表 。</p>
<ul>
<li><p>向列表左边增加元素 <code>lpush key value [value...]</code></p>
</li>
<li><p>向列表右边增加元素 <code>rpush key value [value...]</code></p>
</li>
</ul>
<h4 id="Set-集合类型"><a href="#Set-集合类型" class="headerlink" title="Set 集合类型"></a>Set 集合类型</h4><p>Redis的Set是string类型的无序集合。集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p>
<ul>
<li>增加元素 <code>sadd key member [member...]</code></li>
</ul>
<p>添加一个 string 元素到 key 对应的 set 集合中，成功返回1，如果元素已经在集合中返回 0，如果 key 对应的 set 不存在则返回错误。 </p>
<p>还包括运算命令，可以对集合进行求差、交集、并集。</p>
<h4 id="zset-有序集合"><a href="#zset-有序集合" class="headerlink" title="zset 有序集合"></a>zset 有序集合</h4><p>zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数，redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的，但分数(score)却可以重复，如果该元素已经存在则会用新的分数替换原有的分数。</p>
<ul>
<li>增加元素  <code>zadd key score member [score member...]</code></li>
</ul>
<h3 id="设置-key-的生存时间"><a href="#设置-key-的生存时间" class="headerlink" title="设置 key 的生存时间"></a>设置 key 的生存时间</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>EXPIRE key seconds</td>
<td>设置key的生存时间（单位：秒）key在多少秒后会自动删除</td>
</tr>
<tr>
<td>TTL key</td>
<td>查看key剩余的生存时间</td>
</tr>
<tr>
<td>PERSIST key</td>
<td>清除生存时间</td>
</tr>
<tr>
<td>PEXPIRE key milliseconds</td>
<td>生存时间设置单位为：毫秒</td>
</tr>
</tbody></table>
<p>例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.101.3:7002&gt; set test 1       设置test的值为1</span><br><span class="line">OK</span><br><span class="line">192.168.101.3:7002&gt; get test         获取test的值</span><br><span class="line">"1"</span><br><span class="line">192.168.101.3:7002&gt; EXPIRE test 5    设置test的生存时间为5秒</span><br><span class="line">(integer) 1</span><br><span class="line">192.168.101.3:7002&gt; TTL test         查看test的生于生成时间还有1秒删除</span><br><span class="line">(integer) 1</span><br><span class="line">192.168.101.3:7002&gt; TTL test</span><br><span class="line">(integer) -2</span><br><span class="line">192.168.101.3:7002&gt; get test         获取test的值，已经删除</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<h3 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h3><h4 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h4><p>当 Redis 需要做持久化时，Redis 会 fork 一个子进程，子进程将数据写到磁盘上一个临时 RDB 文件中。当子进程完成写临时文件后，将原来的 RDB 替换掉，这样的好处就是可以<code>copy-on-write</code>。</p>
<p>Redis默认情况下，是快照 RDB 的持久化方式，将内存中的数据以快照的方式写入二进制文件中，默认的文件名是 dump.rdb 。</p>
<p>当 Redis 需要保存 <code>dump.rdb</code> 文件时， 具体执行以下操作:</p>
<ul>
<li>Redis 调用forks. 同时拥有父进程和子进程。</li>
<li>子进程将数据集写入到一个临时 RDB 文件中。</li>
<li>当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB 文件替换原来的 RDB 文件，并删除旧的 RDB 文件。</li>
</ul>
<p>这种工作方式使得 Redis 可以从写时复制（<code>copy-on-write</code>）机制中获益。</p>
<h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><p>使用 AOF 做持久化，每一个写命令都通过write函数追加到 appendonly.aof 中，当 Redis 重启时，将会读取 AOF 文件进行“重放”以恢复到 Redis 关闭前的最后时刻。 </p>
<h4 id="RDB-方式与-AOF-方式的优缺点"><a href="#RDB-方式与-AOF-方式的优缺点" class="headerlink" title="RDB 方式与 AOF 方式的优缺点"></a>RDB 方式与 AOF 方式的优缺点</h4><h5 id="RDB的优点"><a href="#RDB的优点" class="headerlink" title="RDB的优点"></a>RDB的优点</h5><ul>
<li><p>RDB 是一个非常紧凑的文件，它保存了某个时间点的数据集，非常适用于数据集的备份。比如可以每隔一段时间或者在某个时间点备份一次数据，这样在出现问题时可以根据需求恢复到不同版本的数据集。</p>
</li>
<li><p>紧凑的单一文件，很方便传送到另一个远端数据中心，非常适用于灾难恢复。</p>
</li>
<li><p>RDB 在保存 RDB 文件时父进程唯一需要做的就是 fork 出一个子进程，接下来的工作全部由子进程来做，父进程不需要再做其他 IO 操作，所以 RDB 持久化方式可以最大化 Redis 的性能。</p>
</li>
<li><p>与AOF相比,在恢复大的数据集的时候，RDB 方式会更快一些。</p>
</li>
</ul>
<h5 id="RDB的缺点"><a href="#RDB的缺点" class="headerlink" title="RDB的缺点"></a>RDB的缺点</h5><ul>
<li>Redis 要完整的保存整个数据集是一个比较繁重的工作,你通常会每隔5分钟或者更久做一次完整的保存,万一在 Redis 意外宕机,你可能会丢失几分钟的数据。 </li>
</ul>
<h5 id="AOF的优点"><a href="#AOF的优点" class="headerlink" title="AOF的优点"></a>AOF的优点</h5><ul>
<li>使用 AOF 持久化会让 Redis 变得非常耐久（much more durable）：你可以设置不同的 fsync 策略，比如无 fsync ，每秒钟一次 fsync ，或者每次执行写入命令时 fsync 。 AOF 的默认策略为每秒钟 fsync 一次，在这种配置下，Redis 仍然可以保持良好的性能，并且就算发生故障停机，也最多只会丢失一秒钟的数据。</li>
<li>Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写： 重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合。  整个重写操作是绝对安全的。</li>
<li>AOF 文件有序地保存了对数据库执行的所有写入操作， 这些写入操作以 Redis 协议的格式保存， 因此 AOF 文件的内容非常容易被人读懂， 对文件进行分析也很轻松。 </li>
</ul>
<h5 id="AOF的缺点"><a href="#AOF的缺点" class="headerlink" title="AOF的缺点"></a>AOF的缺点</h5><ul>
<li>对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。 </li>
<li>根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB。  </li>
</ul>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><h4 id="适合使用的场景"><a href="#适合使用的场景" class="headerlink" title="适合使用的场景"></a>适合使用的场景</h4><ul>
<li>缓存：缓存热点数据，减少数据库的压力，在提升服务器性能方面非常有效 。</li>
<li>会话缓存：默认Session是保存在服务器的文件中，如果是集群服务，同一个用户过来可能落在不同机器上，这就会导致用户频繁登陆；采用Redis保存Session后，无论用户落在那台机器上都能够获取到对应的Session信息。</li>
<li>排行榜：如果使用传统的关系型数据库来做这个事儿，非常的麻烦，而利用Redis的SortSet数据结构能够非常方便搞定。</li>
<li>排行榜，如果使用传统的关系型数据库来做这个事儿，非常的麻烦，而利用Redis的SortSet数据结构能够非常方便搞定。</li>
<li>计算器/限速器，利用Redis中原子性的自增操作，我们可以统计类似用户点赞数、用户访问数等，这类操作如果用MySQL，频繁的读写会带来相当大的压力；限速器比较典型的使用场景是限制某个用户访问某个API的频率，常用的有抢购时，防止用户疯狂点击带来不必要的压力。</li>
<li>好友关系，利用集合的一些命令，比如求交集、并集、差集等。可以方便搞定一些共同好友、共同爱好之类的功能。</li>
<li>简单消息队列，除了Redis自身的发布/订阅模式，我们也可以利用List来实现一个队列机制，比如：到货通知、邮件发送之类的需求，不需要高可靠，但是会带来非常大的DB压力，完全可以用List来完成异步解耦。</li>
</ul>
<h4 id="不适合使用Redis的场景"><a href="#不适合使用Redis的场景" class="headerlink" title="不适合使用Redis的场景"></a>不适合使用Redis的场景</h4><p>数据量太大、数据访问频率非常低的业务都不适合使用Redis，数据太大会增加成本，访问频率太低，保存在内存中纯属浪费资源。 </p>
<h4 id="多核服务器中使用"><a href="#多核服务器中使用" class="headerlink" title="多核服务器中使用"></a>多核服务器中使用</h4><p>是单线程的，我们现在服务器都是多核的，那不是很浪费？可以通过在单机开多个Redis实例，来利用多核性能。</p>
<h3 id="Redis为什么这么快"><a href="#Redis为什么这么快" class="headerlink" title="Redis为什么这么快"></a>Redis为什么这么快</h3><ul>
<li>完全基于内存，绝大部分请求是纯粹的内存操作，读写数据的时候都不会受到硬盘 I/O 速度的限制，所以速度极快。 </li>
<li>数据结构简单，对数据操作也简单，Redis中的数据结构是专门进行设计的。</li>
<li>采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗 。</li>
<li>使用多路I/O复用模型，非阻塞IO。</li>
<li>使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis直接自己构建了VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求 。</li>
</ul>
<h3 id="缓存雪崩、击穿、穿透"><a href="#缓存雪崩、击穿、穿透" class="headerlink" title="缓存雪崩、击穿、穿透"></a>缓存雪崩、击穿、穿透</h3><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>缓存在同一时间内大量键过期（失效），接着来的一大波请求瞬间都落在了数据库中导致连接异常。</p>
<p>解决方法：</p>
<ul>
<li>批量往Redis存数据的时候，把每个Key的失效时间都加个随机值，这样可以保证数据不会在同一时间大面积失效。</li>
<li>设置热点数据永远不过期，有更新操作就更新缓存。</li>
</ul>
<h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>缓存穿透是指缓存和数据库中都没有的数据被用户请求，由于缓存中都没有，导致这些请求短时间内直接落在了数据库上，导致数据库异常。</p>
<p>解决方法：</p>
<ul>
<li>使用布隆过滤器，可以快速判断一个key是否存在，不存在就直接返回。</li>
<li>使用互斥锁排队，若其它线程获取锁失败，则等待一段时间后重试。</li>
<li>在接口层增加校验，比如用户鉴权校验，参数做校验，不合法的参数直接代码Return，比如：id 做基础校验，id &lt;=0的直接拦截等。</li>
</ul>
<h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p>某个Key非常热点，在不停的扛着大并发集中对这一个点进行的访问，当这个Key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个完好无损的桶上凿开了一个洞。</p>
<p>解决方法：</p>
<ul>
<li>设置热点数据永远不过期。</li>
<li>使用互斥锁。</li>
</ul>
<h3 id="Redis的主从复制"><a href="#Redis的主从复制" class="headerlink" title="Redis的主从复制"></a>Redis的主从复制</h3><h4 id="什么是主从复制"><a href="#什么是主从复制" class="headerlink" title="什么是主从复制"></a>什么是主从复制</h4><p>持久化保证了即使Redis服务重启也不会丢失数据，因为Redis服务重启后会将硬盘上持久化的数据恢复到内存中，但是当redis服务器的硬盘损坏了可能会导致数据丢失，如果通过Redis的主从复制机制就可以避免这种单点故障。</p>
<p>Redis的主从复制机制是指可以让从服务器(slave)能精确复制主服务器(master)的数据，一台master服务器也可以对应多台slave服务器，如下图所示：</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/7/3/16bb7079ca3da66e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="redis_master_slave"></p>
<h4 id="复制方式"><a href="#复制方式" class="headerlink" title="复制方式"></a>复制方式</h4><p>Redis的主从复制是异步复制，异步分为两个方面，一个是master服务器在将数据同步到slave时是异步的，因此master服务器在这里仍然可以接收其他请求，主从复制不会阻塞master，在同步数据时，master 可以继续处理client 请求；并且slave在接收同步数据也是异步的。</p>
<p>Redis主从复制分为以下三种方式：</p>
<ol>
<li>当master服务器与slave服务器正常连接时，master服务器会发送数据命令流给slave服务器,将自身数据的改变复制到slave服务器。</li>
<li>当因为各种原因master服务器与slave服务器断开后，slave服务器在重新连上master服务器时会尝试重新获取断开后未同步的数据即部分同步，或者称为部分复制。</li>
<li>如果无法部分同步(比如初次同步)，则会请求进行全量同步，这时master服务器会将自己的rdb文件发送给slave服务器进行数据同步，并记录同步期间的其他写入，再发送给slave服务器，以达到完全同步的目的，这种方式称为全量复制。</li>
</ol>
<h4 id="主从复制的作用"><a href="#主从复制的作用" class="headerlink" title="主从复制的作用"></a>主从复制的作用</h4><ul>
<li><strong>保存Redis数据副本</strong>：当我们只是通过RDB或AOF把Redis的内存数据持久化毕竟只是在本地，并不能保证绝对的安全，而通过将数据同步slave服务器上，可以保留多一个数据备份，更好地保证数据的安全。</li>
<li><strong>读写分离</strong>：在配置了主从复制之后，如果master服务器的读写压力太大，可以进行读写分离，客户端向master服务器写入数据，在读数据时，则访问slave服务器，从而减轻master服务器的访问压力。</li>
</ul>
<p><img src="https://user-gold-cdn.xitu.io/2019/7/3/16bb7c6143686ce5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="read_write_splitting"></p>
<ul>
<li><strong>高可用性与故障转移</strong>：服务器的高可用性是指服务器能提供7*24小时不间断的服务，Redis可以通过Sentinel系统管理多个Redis服务器，当master服务器发生故障时，Sentineal系统会根据一定的规则将某台slave服务器升级为master服务器,继续提供服务，实现故障转移，保证Redis服务不间断。</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://juejin.im/post/5b4dd82ee51d451925629622" target="_blank" rel="noopener">Redis 入门</a></p>
<p><a href="https://www.jianshu.com/p/4f9f341dacac" target="_blank" rel="noopener">Redis五大数据类型</a></p>
<p><a href="https://juejin.im/post/5bb02c42e51d450e92524b6f" target="_blank" rel="noopener">Redis持久化RDB和AOF</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/42272979" target="_blank" rel="noopener">Redis是单线程的，但Redis为什么这么快？</a></p>
<p><a href="https://juejin.im/post/5b961172f265da0ab7198f4d" target="_blank" rel="noopener">Redis缓存穿透、缓存雪崩、redis并发问题分析</a></p>
<p><a href="https://juejin.im/post/5d14bb8ff265da1b602915c5" target="_blank" rel="noopener">Redis主从复制机制详解</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM基础系列博文推荐</title>
    <url>/2020/04/01/JvmStudy/</url>
    <content><![CDATA[<p>推荐一个对JVM基础进行介绍的系列博文</p>
<a id="more"></a>

<h3 id="JVM基础系列文章目录"><a href="#JVM基础系列文章目录" class="headerlink" title="JVM基础系列文章目录"></a>JVM基础系列文章目录</h3><ul>
<li><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_00_why_learn_jvm.html" target="_blank" rel="noopener">JVM基础系列开篇：为什么要学虚拟机？</a></li>
<li><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_01_the_history_of_java.html" target="_blank" rel="noopener">JVM基础系列第1讲：Java 语言的前世今生</a></li>
<li><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_02_the_history_of_jvm.html" target="_blank" rel="noopener">JVM基础系列第2讲：Java 虚拟机的历史</a></li>
<li><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_03_the_nature_of_jvm.html" target="_blank" rel="noopener">JVM基础系列第3讲：到底什么是虚拟机？</a></li>
<li><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_04_from_source_code_to_machine_code.html" target="_blank" rel="noopener">JVM基础系列第4讲：从源代码到机器码，发生了什么？</a></li>
<li><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_05_jvm_bytecode_analysis.html" target="_blank" rel="noopener">JVM基础系列第5讲：字节码文件结构</a></li>
<li><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_06_jvm_memory_model.html" target="_blank" rel="noopener">JVM基础系列第6讲：Java虚拟机内存结构</a></li>
<li><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_07_jvm_class_loader_mechanism.html" target="_blank" rel="noopener">JVM基础系列第7讲：JVM类加载机制</a></li>
<li><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_08_jvm_garbage_collection.html" target="_blank" rel="noopener">JVM基础系列第8讲：JVM 垃圾回收机制</a></li>
<li><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_09_jvm_garabage_collector.html" target="_blank" rel="noopener">JVM基础系列第9讲：JVM垃圾回收器</a></li>
<li><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_10_gc_type.html" target="_blank" rel="noopener">JVM基础系列第10讲：垃圾回收的几种类型</a></li>
<li><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_11_jvm_param_heap_stack.html" target="_blank" rel="noopener">JVM基础系列第11讲：JVM参数之堆栈空间配置</a></li>
<li><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_12_jvm_param_jvm_param.html" target="_blank" rel="noopener">JVM基础系列第12讲：JVM参数之查看JVM参数</a></li>
<li><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_13_jvm_param_class_info.html" target="_blank" rel="noopener">JVM基础系列第13讲：JVM参数之追踪类信息</a></li>
<li><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_14_jvm_param_gc_log.html" target="_blank" rel="noopener">JVM基础系列第14讲：JVM参数之GC日志配置</a></li>
<li><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_15_jdk_monitor_command.html" target="_blank" rel="noopener">JVM基础系列第15讲：JDK性能监控命令</a></li>
</ul>
<h3 id="每章概要"><a href="#每章概要" class="headerlink" title="每章概要"></a>每章概要</h3><ul>
<li><p><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_00_why_learn_jvm.html" target="_blank" rel="noopener">JVM基础系列开篇：为什么要学虚拟机？</a></p>
<p> 学习 Java 虚拟机能深入地理解 Java 这门语言， 为线上排查问题打下基础。很多时候 Java 应用出现问题，就是 Java 虚拟机的内存出现了问题。要么是内存溢出了，要么是 GC 频繁导致响应慢等等。 </p>
</li>
<li><p><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_01_the_history_of_java.html" target="_blank" rel="noopener">JVM基础系列第1讲：Java 语言的前世今生</a></p>
<p> JRE（Java Runtime Environment）仅包含运行 Java 程序的必需组件，包括 Java 虚拟机以及 Java 核心类库等。JDK（Java Development Kit）包含了 JRE，同时还包含了编译java源码的编译器javac，很多java程序调试和分析的工具：jconsole，jvisualvm等工具软件，还包含了java程序编写所需的文档和demo例子程序。</p>
</li>
<li><p><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_02_the_history_of_jvm.html" target="_blank" rel="noopener">JVM基础系列第2讲：Java 虚拟机的历史</a></p>
<p> HotSpot VM 可以说是使用最为广泛的 Java 虚拟机 ， 从 2000 年 JDK 1.3 发布，HotSpot VM 作为默认的虚拟机开始，一直到现在。</p>
</li>
<li><p><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_03_the_nature_of_jvm.html" target="_blank" rel="noopener">JVM基础系列第3讲：到底什么是虚拟机？</a></p>
<p> Java 虚拟机出现之后，只需要按照特定规范编译书写，编译器编译成字节码文件（Class文件）后，虚拟机会将字节码生成对应的机器码，使得同一份代码可以在不同的各操作系统上运行。</p>
</li>
<li><p><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_04_from_source_code_to_machine_code.html" target="_blank" rel="noopener">JVM基础系列第4讲：从源代码到机器码，发生了什么？</a></p>
<p> 前端编译器将 Java 代码翻译成字节码 ，JIT 编译器和AOT编译器 将字节码转化为本地机器代码。在 HotSpot 虚拟机内置了两个即时编译器，分别称为 Client Compiler 和Server Compiler。这两种不同的编译器衍生出两种不同的编译模式，分别称之为：C1 编译模式，C2 编译模式。</p>
</li>
<li><p><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_05_jvm_bytecode_analysis.html" target="_blank" rel="noopener">JVM基础系列第5讲：字节码文件结构</a></p>
<p> 《Java 虚拟机规范》规定了 Java 虚拟机结构、Class 类文件结构、字节码指令等内容。其中类文件结构在该章节以HelloWorld为例进行了详细的解析。字节码文件结构是一组以 8 位字节为基础的二进制流，各数据项目严格按照顺序紧凑地排列在 Class 文件之中，中间没有添加任何分隔符。(此章内容较多)</p>
</li>
<li><p><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_06_jvm_memory_model.html" target="_blank" rel="noopener">JVM基础系列第6讲：Java虚拟机内存结构</a></p>
<p> 介绍了 Java 虚拟机的内存结构（运行时数据区）。Java 虚拟机的内存结构可以分为公有和私有两部分。公有指的是所有线程都共享的部分，指的是 Java 堆、方法区、常量池。私有指的是每个线程的私有数据，包括：PC寄存器、Java 虚拟机栈、本地方法栈。</p>
<p> <strong>Java 堆</strong>指的是从 JVM 划分出来的一块区域，这块区域专门用于 Java 实例对象的内存分配，几乎所有实例对象都在会这里进行内存的分配。 Java 堆根据对象存活时间的不同，Java 堆还被分为年轻代、老年代两个区域，年轻代还被进一步划分为 Eden 区、From Survivor 0、To Survivor 1 区。按照年龄代来分区的意义是提高垃圾回收效率， 新生代进一步划分为Eden（80%）、Survivor0（10%）、Survivor 1（10%）。这样的比例分配是因为经过统计，80% 的对象存活时间都很短，这样分配可以减少内存空间的浪费，提高内存空间利用率。有两个Survivor区是因为依赖两个Survivor区才能解决内存碎片问题。 </p>
</li>
<li><p><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_07_jvm_class_loader_mechanism.html" target="_blank" rel="noopener">JVM基础系列第7讲：JVM类加载机制</a></p>
<p> 当 Java 虚拟机将 Java 源码编译为字节码之后，虚拟机便可以将字节码读取进内存，从而进行解析、运行等整个过程，即Java 虚拟机的类加载机制。JVM 虚拟机执行 class 字节码的过程可以分为七个阶段：<strong>加载、验证、准备</strong>（ 为类变量分配内存并初始化 ）<strong>、解析、初始化</strong>（ 根据语句执行顺序对类对象进行初始化 ）、<strong>使用、卸载</strong>。</p>
</li>
<li><p><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_08_jvm_garbage_collection.html" target="_blank" rel="noopener">JVM基础系列第8讲：JVM 垃圾回收机制</a></p>
<p> 什么是垃圾，之后如何判断垃圾（ GC Root Tracing 算法 ），如何回收垃圾（ 标记清除算法、复制算法、标记压缩算法 ），到垃圾回收两个重要思想：分代思想 （新生代、老年代） 、分区思想 。</p>
</li>
<li><p><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_09_jvm_garabage_collector.html" target="_blank" rel="noopener">JVM基础系列第9讲：JVM垃圾回收器</a></p>
<p> Java 虚拟机的垃圾回收器可以分为四大类别：<strong>串行回收器、并行回收器、CMS 回收器、G1 回收器。</strong> </p>
</li>
<li><p><a href="https://www.cnblogs.com/chanshuyi/p/jvm_serial_10_gc_type.html" target="_blank" rel="noopener">JVM基础系列第10讲：垃圾回收的几种类型</a></p>
<p> 垃圾回收的术语 。Minor GC ：从年轻代空间回收内存； Major GC：从老年代空间回收内存 ；Full GC ：清理整个堆空间， 包括年轻代、老年代和永久代 ； Stop-The-World： 指在进行垃圾回收时因为标记或清理的需要，必须让所有执行任务的线程停止执行任务，从而让垃圾回收线程回收垃圾的时间间隔。 </p>
</li>
</ul>
<h3 id="额外参考"><a href="#额外参考" class="headerlink" title="额外参考"></a>额外参考</h3><p><a href="https://zhuanlan.zhihu.com/p/74538951" target="_blank" rel="noopener">为什么新生代内存需要有两个Survivor区</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java类加载器学习笔记</title>
    <url>/2020/03/28/ClassLoaderStudy/</url>
    <content><![CDATA[<p>记录对Java类加载器的学习过程。</p>
<a id="more"></a>

<h3 id="ClassLoader-做什么的？"><a href="#ClassLoader-做什么的？" class="headerlink" title="ClassLoader 做什么的？"></a>ClassLoader 做什么的？</h3><p>用来加载 Class 的。它负责将 Class 的字节码形式转换成内存形式的 Class 对象。字节码可以来自于磁盘文件 *.class，也可以是 jar 包里的 *.class，也可以来自远程服务器提供的字节流，字节码的本质就是一个字节数组 []byte，它有特定的复杂的内部格式。 </p>
<p>每个 Java 类都维护着一个指向定义它的类加载器的引用，来标识自己是由哪个 ClassLoader 加载的，通过 <code>类名.class.getClassLoader()</code> 可以获取到此引用；然后通过 <code>loader.getParent()</code> 可以获取类加载器的上层类加载器。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader classLoader;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三种Java-类加载器"><a href="#三种Java-类加载器" class="headerlink" title="三种Java 类加载器"></a>三种Java 类加载器</h3><p><strong>BootstrapClassLoader （ 启动类加载器 ）</strong>：负责加载 JVM 运行时核心类，这些类位于 JAVA_HOME/lib/rt.jar 文件中，我们常用内置库 java.xxx.* 都在里面，比如 java.util，java.io，java.nio，java.lang 等等。这个ClassLoader 比较特殊，它是由 C 代码实现的，我们将它称之为根加载器。 </p>
<p><strong>ExtensionClassLoader（ 扩展类加载器 ）</strong>： 负责加载 JVM 扩展类，比如 swing 系列、内置的 js 引擎、xml 解析器 等等，这些库名通常以 javax 开头，它们的 jar 包位于 JAVA_HOME/lib/ext/*.jar 中，有很多 jar 包。 </p>
<p><strong>AppClassLoader（ 应用类加载器 ）</strong>：才是直接面向我们用户的加载器，它会加载 Classpath 环境变量里定义的路径中的 jar 包和目录。我们自己编写的代码以及使用的第三方 jar 包通常都是由它来加载的。 </p>
<h3 id="双亲委派"><a href="#双亲委派" class="headerlink" title="双亲委派"></a>双亲委派</h3><p>AppClassLoader 在加载一个未知的类名时，它并不是立即去搜寻 Classpath，它会首先将这个类名称交给 ExtensionClassLoader 来加载，如果 ExtensionClassLoader 可以加载，那么 AppClassLoader 就不会去加载了。否则它就会搜索 Classpath。</p>
<p>而 ExtensionClassLoader 在加载一个未知的类名时，它也并不是立即搜寻 ext 路径，它会首先将类名称交给 BootstrapClassLoader 来加载，如果 BootstrapClassLoader 可以加载，那么 ExtensionClassLoader 也就不会去加载了。否则它就会搜索 ext 路径下的 jar 包。</p>
<p><img src="https://s1.ax1x.com/2020/03/28/GAp59O.jpg" alt="GAp59O.jpg"></p>
<p>上图这种层次关系被称作为<strong>双亲委派模型</strong>：当一个类加载器收到了加载类的请求，它会先把请求委托给上层加载器去完成，上层加载器又会委托上上层加载器，一直到最顶层的类加载器；如果上层加载器无法完成类的加载工作时，当前类加载器才会尝试自己去加载这个类。 每个 ClassLoader 对象内部都会有一个 parent 属性指向它的父加载器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader parent;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 值得注意的是图中的 ExtensionClassLoader 的 parent 指针画了虚线，这是因为它的 parent 的值是 null，当 parent 字段是 null 时就表示它的父加载器是“根加载器”。如果某个 Class 对象的 classLoader 属性值是 null，那么就表示这个类也是“根加载器”加载的。 </p>
<h3 id="双亲委派模型实际没有“双”"><a href="#双亲委派模型实际没有“双”" class="headerlink" title="双亲委派模型实际没有“双”"></a>双亲委派模型实际没有“双”</h3><p>双亲委派的原文是”parents delegate”。其中parents表达的是“父母这一辈”的人的意思。实际上这个模型中，只是表达“父辈”的class loader而已，并不是说有一个父亲的class loader和一个母亲class loader。<a href="https://www.zhihu.com/question/288949359/answer/468524259" target="_blank" rel="noopener">Java 中的双亲委派的“双”怎么理解 ？</a></p>
<h3 id="contextClassLoader"><a href="#contextClassLoader" class="headerlink" title="contextClassLoader"></a>contextClassLoader</h3><p>contextClassLoader 是那种需要显示使用的类加载器，如果你没有显示使用它，也就永远不会在任何地方用到它。可以像下面这样来使用它：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread.currentThread().getContextClassLoader().loadClass(name);</span><br></pre></td></tr></table></figure>

<p>线程的 contextClassLoader 是从父线程那里继承过来的，所谓父线程就是创建了当前线程的线程。程序启动时的 main 线程的 contextClassLoader 就是 AppClassLoader。这意味着如果没有人工去设置，那么所有的线程的 contextClassLoader 都是 AppClassLoader。</p>
<p>它可以做到跨线程共享类，只要它们共享同一个 contextClassLoader。父子线程之间会自动传递contextClassLoader，所以共享起来将是自动化的。如果不同的线程使用不同的 contextClassLoader，那么不同的线程使用的类就可以隔离开来。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/51374915" target="_blank" rel="noopener">老大难的 Java ClassLoader 再不理解就老了</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>String学习笔记</title>
    <url>/2020/03/25/StringStudy/</url>
    <content><![CDATA[<p>记录对String的学习过程</p>
<a id="more"></a>

<h3 id="不可变性"><a href="#不可变性" class="headerlink" title="不可变性"></a>不可变性</h3><ol>
<li><p>String 类被 final 修饰，说明 String 类绝不可能被继承了，也就是说任何对 String 的操作方法，都不会被子类重写。</p>
</li>
<li><p>String 中保存数据的是一个被<code>final</code>修饰的 char 数组 value（ 在 Java 9 之后，String 类的实现改用 byte 数组存储字符串： <code>private final byte[] value</code> ）。也就是说 value 一旦被赋值，内存地址是绝对无法修改的，而且 value 是private的，外部绝对访问不到，String 也没有开放出可以对 value 进行赋值的方法，所以说value 一旦产生，内存地址就根本无法被修改。</p>
</li>
</ol>
<p>以上两点就是 String 不变性的原因，在设计时充分利用了 final 关键字的特性。因为 String 具有不变性，所以 String 的大多数操作方法，都会返回新的 String对象。</p>
<h3 id="String-amp-StringBuffer-amp-StringBuilder-区别"><a href="#String-amp-StringBuffer-amp-StringBuilder-区别" class="headerlink" title="String &amp; StringBuffer &amp; StringBuilder 区别"></a>String &amp; StringBuffer &amp; StringBuilder 区别</h3><ol>
<li><p><strong>可变性</strong>：String 类型不可变，StringBuilder 和 StringBuffer是可变的。</p>
</li>
<li><p><strong>线程安全性</strong>：String 类型的对象是不可变的，可理解为常量，故线程安全。</p>
<p><strong>StringBuffer-线程安全，StringBuilder-线程不安全。</strong>原因：AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。</p>
</li>
<li><p><strong>性能</strong>：每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。StringBuffer  &amp; StringBuilder每次都会对对象本身进行操作，而不是生成新的对象并改变对象引用，性能更好。</p>
</li>
<li><p><strong>总结</strong>：操作少量的数据，适用 String；单线程操作字符串缓冲区下操作大量数据， 适用 StringBuilder；多线程操作字符串缓冲区下操作大量数据，适用 StringBuffer。</p>
</li>
</ol>
<h3 id="String类设计为不可变的好处"><a href="#String类设计为不可变的好处" class="headerlink" title="String类设计为不可变的好处"></a>String类设计为不可变的好处</h3><ol>
<li><strong>字符串常量池的需要</strong>：只有当字符串是不可变的，字符串池才有可能实现。字符串池的实现可以在运行时节约很多heap空间，因为不同的字符串引用可以指向池中的同一个字符串。但如果字符串是可变的，如果变量改变了它的值，那么其它指向这个值的变量的值也会一起改变。</li>
<li><strong>缓存 Hashcode</strong>：因为字符串是不可变的，所以在它创建的时候hashcode就被缓存了，不需要重新计算，这就使得字符串很适合作为Map中的键，字符串的处理速度要快过其它的键对象。这就是HashMap中的键往往都使用字符串的原因。</li>
<li><strong>不可变对象是线程安全的</strong>：因为字符串是不可变的，所以是多线程安全的，同一个字符串实例可以被多个线程共同使用。不用因为线程安全问题而使用同步操作。</li>
<li><strong>安全性</strong>：如果字符串是可变的，那么会引起很严重的安全问题。譬如，数据库的用户名、密码都是以字符串的形式传入数据库，以获得数据库的连接，或者在socket编程中，主机名和端口都是以字符串的形式传入。因为字符串是不可变的，所以它的值是不可改变的，否则黑客们可以钻到空子，改变字符串指向的对象的值，造成安全漏洞。并且，类加载器要用到字符串，不可变性提供了安全性，以便正确的类被加载。</li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>慕课网：String源码解析</p>
<p><a href="https://www.cnblogs.com/xzwblog/p/7230366.html" target="_blank" rel="noopener">为什么String类是不可变的？</a></p>
<p><a href="https://github.com/Snailclimb" target="_blank" rel="noopener">Snailclimb</a>/<a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">JavaGuide</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>ArrayList学习笔记</title>
    <url>/2020/03/23/ArrayListStudy/</url>
    <content><![CDATA[<p>记录对ArrayList的学习过程</p>
<a id="more"></a>

<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li>ArrayList 整体架构比较简单，就是一个数组结构；</li>
<li>动态数组，容量可变； </li>
<li>modCount 统计当前数组被修改的版本次数，数组结构有变动，就会 +1。增强 for 循环，或者使用迭代器迭代过程中，如果数组大小被改变，会快速失败，抛出异常；</li>
<li>允许插入null 值。</li>
</ol>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>通过无参构造方法的方式ArrayList()初始化，则赋值底层数<code>Object[] elementData</code>为一个默认空数组<code>Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {}</code>所以数组容量为0，只有真正对数据进行添加add时，才分配默认<code>DEFAULT_CAPACITY = 10</code>的初始容量。</p>
<h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><p>扩容后的容量是原容量的1.5倍。扩容的时候，Java8以后的效率更高了，采用了位运算，增量是将当前数组长度<strong>右移</strong>一位得到的（length/2）。新容量计算方法：<code>newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1)</code></p>
<h3 id="指定位置set方法的问题"><a href="#指定位置set方法的问题" class="headerlink" title="指定位置set方法的问题"></a>指定位置set方法的问题</h3><p>在初始化的时候指定ArrayList的初始容量，但是此时list的siez还是为0。若在此时调用<code>set(int index, E element)</code>，如果指定的index为2,3…这样的位置，是会报数组下标越界异常的。唯一方法是在使用构造函数后，根据需要使用add()多次。原因是其实数组是初始化了，但是List没，那size就没变，set下标是和size比较的那就报错了。 </p>
<h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>非线程安全，线程安全版本的数组容器是Vector，Vector实现线程安全的方式是给所有的方法统统加上synchronized。也可以不使用Vector，用Collections.synchronizedList把一个普通ArrayList包装成一个线程安全版本的数组容器也可以，原理同Vector是一样的，就是给所有的方法套上一层synchronized。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/101574379" target="_blank" rel="noopener">敖丙: ArrayList</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>ConcurrentHashMap学习笔记</title>
    <url>/2020/03/22/ConcurrentHashMapStudy/</url>
    <content><![CDATA[<p>记录对ConcurrentHashMap的学习过程</p>
<a id="more"></a>

<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li>jdk1.8中抛弃了原有的 Segment 分段锁，而采用了 CAS + synchronized 来保证并发安全性；</li>
<li>迭代过程中，即使 Map 结构被修改，也不会抛 ConcurrentModificationException 异常；</li>
<li>除了数组 + 链表 + 红黑树的基本结构外，新增了转移节点，是为了保证扩容时的线程安全的节点；</li>
</ol>
<h3 id="CAS与自旋"><a href="#CAS与自旋" class="headerlink" title="CAS与自旋"></a>CAS与自旋</h3><p>CAS (compare and swap)  是乐观锁的一种实现方式，是一种轻量级锁，JUC 中很多工具类的实现就是基于 CAS 的。 线程在读取数据时不进行加锁，在准备写回数据时，先去查询原值，操作的时候比较原值是否修改，若未被其他线程修改则写回，若已被修改，则重新执行读取流程。</p>
<p>乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。 </p>
<h3 id="插入元素时的线程安全性"><a href="#插入元素时的线程安全性" class="headerlink" title="插入元素时的线程安全性"></a>插入元素时的线程安全性</h3><ol>
<li>通过自旋死循环保证一定可以新增成功：</li>
</ol>
<p>通过自旋死循环保证一定可以新增成功。在新增之前，通过 for (Node&lt;K,V&gt;[] tab = table;;) 这样的死循环来保证新增一定可以成功，一旦新增成功，就可以退出当前死循环，新增失败的话，会重复新增的步骤，直到新增成功为止。</p>
<ol start="2">
<li>当前数组节点元素为空时，通过 CAS 新增</li>
</ol>
<p>没有在判断数组节点为空的情况下直接赋值。因为在判断数组节点为空和赋值的瞬间，很有可能数组节点已经被其他线程赋值了，所以采用 CAS 算法，能够保证数组节点为空的情况下赋值成功，如果恰好数组节点已经被其他线程赋值，当前 CAS 操作失败，会再次执行 for自旋，再走数组节点有值的 put 流程，这里就是自旋 + CAS 的结合。</p>
<ol start="3">
<li>当前数组节点有值，锁住当前数组节点</li>
</ol>
<p>put 时，如果当前数组节点有值，也即哈希碰撞的情况，此时数组节点上可能是链表或红黑树，通过锁住数组节点，来保证同一时刻只会有一个线程能对此数组节点进行修改。</p>
<ol start="4">
<li>锁住红黑树的根节点</li>
</ol>
<p>在要对红黑树的节点进行旋转时，锁住红黑树的根节点，保证同一时刻，当前红黑树只能被一个线程旋转。</p>
<h3 id="扩容时的线程安全性"><a href="#扩容时的线程安全性" class="headerlink" title="扩容时的线程安全性"></a>扩容时的线程安全性</h3><p>ConcurrentHashMap 的扩容时机和 HashMap 相同，都是在 put 方法的最后一步检查是否需要扩容，如果需要则进行扩容，但两者扩容的过程完全不同，ConcurrentHashMap 扩容的方法叫做 transfer，扩容方法的主要思路是：</p>
<p>拷贝的过程是将旧数组中的元素依次拷贝到一个新数组中的过程。在拷贝旧数组的某个节点元素时，现将这个节点元素锁住，保证元素组的这个节点元素不能被操作。将这个节点元素成功拷贝到新数组后，将旧数组的这个节点设置为转移节点，每拷贝成功一次，就把原数组中的节点设置成转移节点。这时如果有新数据正好需要 put 到这个节点时，发现该节点为转移节点，就会一直等待，直到扩容成功之后，才能继续 put。所以在扩容完成之前，该节点元素对应的数据是不会发生变化的。</p>
<h3 id="读操作"><a href="#读操作" class="headerlink" title="读操作"></a>读操作</h3><p>ConcurrentHashMap 的 get 方法非常简单也非常高效，<strong>因为整个过程都不需要加锁</strong>。 其查找的过程基本与HashMap相似。</p>
<h3 id="快速失败-fail-fast-与安全失败-fail-safe"><a href="#快速失败-fail-fast-与安全失败-fail-safe" class="headerlink" title="快速失败(fail-fast)与安全失败(fail-safe)"></a>快速失败(fail-fast)与安全失败(fail-safe)</h3><ol>
<li>快速失败</li>
</ol>
<p>在使用迭代器对集合对象进行遍历的时候，如果 A 线程正在对集合进行遍历，此时 B 线程对集合进行修改（增加、删除、修改），或者 A 线程在遍历过程中对集合进行修改，都会导致 A 线程抛出 ConcurrentModificationException 异常。</p>
<ol start="2">
<li>安全失败</li>
</ol>
<p>采用安全失败机制的集合容器，在遍历时不是直接在集合内容上访问的，而是先复制原有集合内容，在拷贝的集合上进行遍历。由于迭代时是对原集合的拷贝进行遍历，所以在遍历过程中对原集合所作的修改并不能被迭代器检测到，故不会抛 ConcurrentModificationException 异常。</p>
<h3 id="与Hashtable对比"><a href="#与Hashtable对比" class="headerlink" title="与Hashtable对比"></a>与Hashtable对比</h3><p>Hashtable目前使用较少，其直接在方法上锁，相当于整表上锁，并发度很低，最多同时允许一个线程访问。ConcurrentHashMap的并发度比其好很多。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/97902016" target="_blank" rel="noopener">《吊打面试官》系列-ConcurrentHashMap &amp; HashTable</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/49148823" target="_blank" rel="noopener">说说快速失败和安全失败是什么</a></p>
<p>慕课网：ConcurrentHashMap 源码解析和设计思路</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap学习笔记</title>
    <url>/2020/03/22/HashMapStudy/</url>
    <content><![CDATA[<p>记录对Java8中HashMap原理的学习过程。</p>
<a id="more"></a>

<h3 id="HashMap整体结构"><a href="#HashMap整体结构" class="headerlink" title="HashMap整体结构"></a>HashMap整体结构</h3><p>HashMap 底层的数据结构主要是：数组 + 链表 + 红黑树（JDK1.8新增红黑树）。其中当链表的长度大于等于 8 时，链表会转化成红黑树，当红黑树的大小小于等于 6 时，红黑树会转化成链表，整体的数据结构如下图：</p>
<p><img src="https://s1.ax1x.com/2020/03/22/85iAg0.png" alt="85iAg0.png"></p>
<p>Java中的HashMap采用了链地址法处理哈希冲突。左边竖着的是 HashMap 的数组结构，数组的元素可能是单个 Node，也可能是个链表，也可能是个红黑树，比如数组下标索引为 2 的位置就是一个链表，下标索引为 9 的位置对应的就是红黑树。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li>HashMap能够将键设为<strong>null</strong>，也可以将值设为<strong>null</strong>。  与之对应的是<strong>Hashtable</strong>(注意：不是HashTable)，Hashtable不能将键和值设为<strong>null</strong>，否则运行时会报空指针异常错误；</li>
<li>loadFactor（负载因子） 默认值是 0.75， 是均衡了时间和空间的一个选择 ，一般不建议修改。较高的值会减少空间开销（扩容减少，数组大小增长速度变慢），但增加了查找成本（hash 冲突增加，链表长度变长）。扩容条件：当前size = 数组容量n * loadFactor；</li>
<li>默认的初始容量为16，如果有很多数据需要储存到 HashMap 中，建议 HashMap 的容量一开始就设置成足够的大小，这样可以防止在其过程中不断的扩容，影响性能；</li>
<li>HashMap 是非线程安全的，我们可以自己在外部加锁，或者通过 <code>Map m = Collections.synchronizedMap(new HashMap(...));</code>来实现线程安全，Collections.synchronizedMap 的实现是在每个方法上加上了 synchronized 锁；</li>
<li>通过Node&lt;K,V&gt;[] table哈希桶数组存放数据。</li>
</ol>
<h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><p>链表的新增元素就是把当前节点追加到链表的尾部，和 LinkedList 的追加实现是一样的。红黑树新增节点，如果节点没有实现 Comparable 接口，使用 equals 进行判断；如果节点自己实现了 Comparable 接口，使用compareTo 进行判断。</p>
<p>当链表长度大&gt;= 8 时，此时的链表就会转化成红黑树，转化的方法是：treeifyBin，此方法有一个判断，当链表长度大于等于 8，并且整个数组大小大于 64 时，才会转成红黑树，当数组大小小于 64 时，只会触发扩容，不会转化成红黑树。</p>
<p>为什么链表长度&gt;=8转换为红黑树，这个阈值设为8的原因：链表查询的时间复杂度是 O (n)，红黑树的查询复杂度是 O (log (n))。在链表数据不多的时候，使用链表进行遍历也比较快，只有当链表数据比较多的时候，才会转化成红黑树，但红黑树需要的占用空间是链表的 2 倍，考虑到转化时间和空间损耗，所以我们需要定义出转化的边界值。链表的长度达到 8 ，出现的概率是 0.00000006，不到千万分之一，因此正常情况下，链表的长度不可能到达 8 ，而一旦到达 8 时，肯定是 hash 算法出了问题，所以在这种情况下，为了让 HashMap 仍然有较高的查询性能，所以让链表转化成红黑树。一般情况下使用 HashMap 时，几乎不会碰到链表转化成红黑树的情况。</p>
<h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><p>每次扩容新容量是之前容量的2倍。源码：<code>(newCap = oldCap &lt;&lt; 1)</code></p>
<h4 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h4><p>为什么要重新计算hash？因为数组的长度值是参与到哈希运算中的，容量改变时数组长度发生改变意味着哈希的规则发生了变化，所以要对每个元素重新hash。</p>
<h4 id="链表头插与尾插"><a href="#链表头插与尾插" class="headerlink" title="链表头插与尾插"></a>链表头插与尾插</h4><p><strong>java8之前是头插法</strong>，就是说新来的值会取代原有的值，原有的值就顺推到链表中去，因为代码的作者认为后来的值被查找的可能性更大一点，提升查找的效率。但是在java8之后，都是改用尾部插入了。因为在扩容时，头插法可能导致循环链表。从Java8开始改用尾插法。</p>
<p>jdk1.7在多线程操作HashMap时可能引起死循环，原因是扩容转移后前后链表顺序倒置，在转移过程中修改了原来链表中节点的引用关系，形成了循环链表。扩容会正常完成，但是在下一次get时，如果在这个循环链表所在的索引位置查找一个不存在的key，就会陷入死循环。具体图解：<a href="https://zhuanlan.zhihu.com/p/31614195" target="_blank" rel="noopener">高并发下的HashMap</a></p>
<p>jdk1.8及以后在同样的前提下并不会引起死循环，因为使用尾插法，使得扩容转移后前后链表顺序不变，保持之前节点的引用关系。</p>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><h4 id="根据key进行查找："><a href="#根据key进行查找：" class="headerlink" title="根据key进行查找："></a>根据key进行查找：</h4><p>HashMap 的查找主要分为以下三步：</p>
<ol>
<li>根据 hash 算法定位数组的索引位置，使用equals 方法判断当前节点是否是我们需要寻找的 key，是的话直接返回。</li>
<li>判断当前节点有无 next 节点，有的话判断是链表类型，还是红黑树类型。</li>
<li>分别走链表和红黑树不同类型的查找方法。</li>
</ol>
<h4 id="类作为Key时重写equals方法并要重写hashCode方法"><a href="#类作为Key时重写equals方法并要重写hashCode方法" class="headerlink" title="类作为Key时重写equals方法并要重写hashCode方法"></a>类作为Key时重写equals方法并要重写hashCode方法</h4><p>equals(), hashCode()方法都是Object类中的方法，可以使用这两个方法来判断两个对象是否相等。 Object的equals方法比较的是两个对象的内存地址。 如果对equals()方法进行了重写，一定要对hashCode()方法重写，以保证相同的对象返回相同的hash值，不同的对象返回不同的hash值。 </p>
<h3 id="modCount属性与fail-fast"><a href="#modCount属性与fail-fast" class="headerlink" title="modCount属性与fail-fast"></a>modCount属性与fail-fast</h3><p>Java8的官方文档在对HashMap的描述中有这么一段话：</p>
<blockquote>
<p>The iterators returned by all of this class’s “collection view methods” are <em>fail-fast</em>: if the map is structurally modified at any time after the iterator is created, in any way except through the iterator’s own <code>remove</code> method, the iterator will throw a ConcurrentModificationException. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. </p>
</blockquote>
<p>HashMap类中的 int modCount 属性记录了这个HashMap实例在结构上被修改的次数，包括新增、删除、rehash等改变了数据内部结构的修改操作（<strong>注意</strong>：某个key对应的value值被覆盖不属于结构变化） 。</p>
<p>HashMap不是线程安全的，所以在使用迭代器或foreach遍历的时候,会将在遍历前先将modCount原有的值赋给迭代器的expectedModCount属性中，然后进行迭代。若在遍历的过程中，还调用了集合的put(), remove()方法，modCount就会因此被改变（每次进行结构修改操作都会 ++modCount）。若expectedModCount和ModCount不相等，就会抛出ConcurrentModificationException()异常。因为expectedModCount和ModCount这两个值不一致，就说明有多个线程在同时操作集合，这种操作是不确定的、有风险的。为了保证数据的正确性，避免不安全的情况发生，一旦返现这两个值不一致，就立即抛出异常。</p>
<h3 id="HashMap为什么初始容量以及每次扩容后的容量都是2的幂次"><a href="#HashMap为什么初始容量以及每次扩容后的容量都是2的幂次" class="headerlink" title="HashMap为什么初始容量以及每次扩容后的容量都是2的幂次"></a>HashMap为什么初始容量以及每次扩容后的容量都是2的幂次</h3><p>首先，源码中是这样计算元素hash值所对应的数组索引的：</p>
<p><code>(n - 1) &amp; hash</code></p>
<p>为了高效的存取数据，需要尽量减少碰撞，也即将数据更平均的分配在数组当中，每个链表的长度能够大致相同。计算hash对应的索引值的方法实际上就是取模，例如数组容量为n，那么就可以用hash % n这样取模的方法来计算对应Index值。但是计算机处理取模运算是相对较慢的，效率不如位运算快。在容量n为 2次幂的情况下时，(n - 1) &amp; hash = hash % n。因为当n为2的整数次幂时，n-1的二进制位数上都为1，取余和位运算的结果相等。这么做主要为了在扩容和取模时能更高效。</p>
<p>附加：常规的设计是把桶的大小设计为素数，相对来说素数导致冲突的概率要小于合数 ，Java中的HashMap采用合数（2的幂次一定是合数）是一种非常规设计 。</p>
<h3 id="HashCode高位参与运算"><a href="#HashCode高位参与运算" class="headerlink" title="HashCode高位参与运算"></a>HashCode高位参与运算</h3><p> 源码中的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;   <span class="comment">//jdk1.8 &amp; jdk1.7</span></span><br><span class="line">     <span class="keyword">int</span> h;</span><br><span class="line">     <span class="comment">// h = key.hashCode() 为第一步 取hashCode值</span></span><br><span class="line">     <span class="comment">// h ^ (h &gt;&gt;&gt; 16)  为第二步 高位参与运算</span></span><br><span class="line">     <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在JDK1.8的实现中，优化了高位运算的算法，通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)，主要是从速度、功效、质量来考虑的，这么做可以在数组table的长度比较小的时候，也能保证考虑到高低位都参与到Hash的计算中，同时不会有太大的开销。 </p>
<p>下图举例说明了在数组长度较小时hashcode高位参与运算的过程：</p>
<p><img src="https://s1.ax1x.com/2020/03/22/857kHf.png" alt="857kHf.png"></p>
<h3 id="几种Map实现类的联系"><a href="#几种Map实现类的联系" class="headerlink" title="几种Map实现类的联系"></a>几种Map实现类的联系</h3><p><img src="https://s1.ax1x.com/2020/03/22/85ajkF.png" alt="85ajkF.png"></p>
<ol>
<li>HashMap: 常用</li>
<li>Hashtable：Hashtable是遗留类，很多映射的常用功能与HashMap类似，不同的是它承自Dictionary类，并且是线程安全的，任一时间只有一个线程能写Hashtable，并发性不如ConcurrentHashMap，因为ConcurrentHashMap引入了分段锁。Hashtable不建议在新代码中使用，不需要线程安全的场合可以用HashMap替换，需要线程安全的场合可以用ConcurrentHashMap替换。 </li>
<li>LinkedHashMap：LinkedHashMap是HashMap的一个子类，保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序。 </li>
<li>TreeMap：TreeMap实现SortedMap接口，能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator遍历TreeMap时，得到的记录是排过序的。如果使用排序的映射，建议使用TreeMap。在使用TreeMap时，key必须实现Comparable接口或者在构造TreeMap传入自定义的Comparator，否则会在运行时抛出java.lang.ClassCastException类型的异常。 </li>
</ol>
<p><strong>注意</strong>：对于上述四种Map的实现类，要求映射中的key是不可变对象。不可变对象是该对象在创建后它的哈希值不会被改变。如果对象的哈希值发生变化，Map对象很可能就定位不到映射的位置了。因为String类是不可变的，在开发中常用String类型来作为映射的Key。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>慕课网：HashMap 源码解析</p>
<p><a href="https://www.cnblogs.com/xiarongjin/p/8310691.html" target="_blank" rel="noopener">美团技术团队：重新认识HashMap</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/96426441" target="_blank" rel="noopener">敖丙 ：HashMap</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>你好，世界!</title>
    <url>/2020/03/15/my-first-blog/</url>
    <content><![CDATA[<p><img src="https://s1.ax1x.com/2020/03/13/8uFalD.jpg" alt="8uFalD.jpg"></p>
<blockquote>
<p> 弱小和无知不是生存的障碍，傲慢才是。</p>
</blockquote>
<a id="more"></a>

<h3 id="测试博文"><a href="#测试博文" class="headerlink" title="测试博文"></a>测试博文</h3><p>欢迎访问我的博客~</p>
<p>目前本博客采用<strong>next v7</strong>作为主题，趟过了老版本的不少坑，如果你也要想搭建博客并使用next作为你的博客主题，强烈建议使用新版本，老版本的开发者已经不再维护了，新老版本的主题在github上是不同的仓库。<br><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">新版本next主题</a><br><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">老版本next主题</a></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
